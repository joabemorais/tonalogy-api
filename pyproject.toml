[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tonalogy-api"
version = "2.0.0"
description = "An API for analysis and visualization of tonal harmonic progressions using Kripke Semantics"
readme = "README.md"
license = {file = "LICENSE.md"}
authors = [
    {name = "João Morais", email = "joabe.morais@example.com"}
]
maintainers = [
    {name = "João Morais", email = "joabe.morais@example.com"}
]
keywords = [
    "music-theory",
    "harmonic-analysis", 
    "tonality",
    "kripke-semantics",
    "fastapi",
    "api"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pandas>=2.0.0",
    "graphviz>=0.20.0",
    "cairosvg>=2.7.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.7.0",
    "flake8>=6.1.0",
    "pre-commit>=3.5.0"
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.25.0"
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0"
]

[project.urls]
Homepage = "https://github.com/joabemorais/tonalogy-api"
Repository = "https://github.com/joabemorais/tonalogy-api"
Documentation = "https://github.com/joabemorais/tonalogy-api#readme"
Issues = "https://github.com/joabemorais/tonalogy-api/issues"

[project.scripts]
tonalogy-api = "api.main:app"

[tool.setuptools.packages.find]
include = ["api*", "core*", "visualizer*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
"core.config.data" = ["*.json"]
"visualizer.config" = ["*.csv"]
"assets.fonts" = ["*.otf"]

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=api",
    "--cov=core", 
    "--cov=visualizer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
markers = [
    "integration: Integration tests",
    "unit: Unit tests",
    "slow: Slow running tests"
]

# Code formatting with Black
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | temp_images
)/
'''

# Import sorting with isort
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["api", "core", "visualizer"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# Type checking with mypy
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "graphviz.*",
    "cairosvg.*",
    "pandas.*"
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["api", "core", "visualizer"]
omit = [
    "*/tests/*",
    "*/test_*.py", 
    "*/__pycache__/*",
    "*/temp_images/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
